//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Northwind.CodeGen;
using Northwind.Data.Repository.Mappings;
using Category = Northwind.Core.Category;
using Customer = Northwind.Core.Customer;
using CustomerDemographic = Northwind.Core.CustomerDemographic;
using Employee = Northwind.Core.Employee;
using Order = Northwind.Core.Order;
using Product = Northwind.Core.Product;
using Region = Northwind.Core.Region;
using Shipper = Northwind.Core.Shipper;
using Supplier = Northwind.Core.Supplier;
using sysdiagram = Northwind.Core.sysdiagram;
using Territory = Northwind.Core.Territory;

namespace Northwind.Data.Repository
{
    using System;
    //using Northwind.Repository;
    using System.Data.Common;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    
    
    
    
    public partial class NorthwindContext : DbContext
    {
        static NorthwindContext()
    	{ 
    		Database.SetInitializer<NorthwindContext>(null);
    	}
    	
    	public NorthwindContext(bool proxyCreationEnabled = true, bool lazyLoadingEnabled = false) : base("name=NorthwindContext")
        {
            this.Configuration.ProxyCreationEnabled = proxyCreationEnabled;
            this.Configuration.LazyLoadingEnabled = lazyLoadingEnabled;
        }
    
    	public NorthwindContext(string nameOrConnectionString) : base(nameOrConnectionString)
    	{	
    	}
    
    	public NorthwindContext(string nameOrConnectionString, DbCompiledModel model) : base(nameOrConnectionString, model)
    	{
    	}
    
    	public NorthwindContext(DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
    	{
    	}
    
    	public NorthwindContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
    	{
    	}
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {		
    		modelBuilder.Configurations.Add(new CategoryMap());
    		modelBuilder.Configurations.Add(new CustomerMap());
    		modelBuilder.Configurations.Add(new CustomerDemographicMap());
    		modelBuilder.Configurations.Add(new EmployeeMap());
    		modelBuilder.Configurations.Add(new OrderMap());
    		modelBuilder.Configurations.Add(new Order_DetailMap());
    		modelBuilder.Configurations.Add(new ProductMap());
    		modelBuilder.Configurations.Add(new RegionMap());
    		modelBuilder.Configurations.Add(new ShipperMap());
    		modelBuilder.Configurations.Add(new Summary_of_Sales_by_QuarterMap());
    		modelBuilder.Configurations.Add(new Summary_of_Sales_by_YearMap());
    		modelBuilder.Configurations.Add(new SupplierMap());
    		modelBuilder.Configurations.Add(new sysdiagramMap());
    		modelBuilder.Configurations.Add(new TerritoryMap());
        }
    	
        public DbSet<Category> Categories { get; set; }
        public DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Order_Detail> Order_Details { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Region> Regions { get; set; }
        public DbSet<Shipper> Shippers { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Territory> Territories { get; set; }
        public DbSet<Summary_of_Sales_by_Quarter> Summary_of_Sales_by_Quarters { get; set; }
        public DbSet<Summary_of_Sales_by_Year> Summary_of_Sales_by_Years { get; set; }
    	
    	public new IDbSet<T> Set<T>() where T : class
        {
            return base.Set<T>();
        }
    }
    

}
